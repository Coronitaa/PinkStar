
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Asegurarse de que sea postgresql
  url      = env("DATABASE_URL")
}

enum ItemTypeEnum {
  GAME
  WEB
  APP
  ART_MUSIC
}

enum TagTypeEnum {
  VERSION
  LOADER
  GENRE
  PLATFORM
  MISC
  CHANNEL
  FRAMEWORK
  LANGUAGE
  TOOLING
  APP_CATEGORY
  ART_STYLE
  MUSIC_GENRE
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  authorProfile Author? // Un usuario puede ser un autor
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Author {
  id          String     @id @default(cuid())
  name        String
  avatarUrl   String?
  userId      String?    @unique // Un autor puede estar vinculado a un User
  user        User?      @relation(fields: [userId], references: [id])
  resources   Resource[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Tag {
  id                  String        @id @default(cuid())
  name                String
  type                TagTypeEnum
  color               String?
  textColor           String?
  games               Game[]        @relation("GameTags")
  resources           Resource[]    @relation("ResourceTags")
  webItems            WebItem[]     @relation("WebItemTags")
  webItemsTechnology  WebItem[]     @relation("WebItemTechnologies") // Inversa para WebItem.technologies
  appItems            AppItem[]     @relation("AppItemTags")
  appItemsPlatform    AppItem[]     @relation("AppItemPlatforms")   // Inversa para AppItem.platforms
  artMusicItems       ArtMusicItem[] @relation("ArtMusicItemTags")
  artMusicItemsMedium ArtMusicItem[] @relation("ArtMusicItemMedium")  // Inversa para ArtMusicItem.medium
  resourceFilesVersion ResourceFile[] @relation("ResourceFileVersions")
  resourceFilesLoader  ResourceFile[] @relation("ResourceFileLoaders")
  resourceFilesChannel ResourceFile[] @relation("ResourceFileChannels")
  changelogVersions    ChangelogEntry[] @relation("ChangelogVersions")
  changelogLoaders     ChangelogEntry[] @relation("ChangelogLoaders")
  changelogChannels    ChangelogEntry[] @relation("ChangelogChannels")
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@unique([name, type])
}

model Category {
  id              String        @id @default(cuid())
  name            String
  slug            String        @unique
  description     String?
  parentItemType  ItemTypeEnum // Para saber a qué tipo de item pertenece esta categoría
  games           Game[]        @relation("GameCategories")
  webItems        WebItem[]     @relation("WebItemCategories")
  appItems        AppItem[]     @relation("AppItemCategories")
  artMusicItems   ArtMusicItem[] @relation("ArtMusicItemCategories")
  resources       Resource[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Game {
  id              String        @id @default(cuid())
  name            String
  slug            String        @unique
  description     String
  longDescription String?
  bannerUrl       String
  iconUrl         String
  tags            Tag[]         @relation("GameTags")
  categories      Category[]    @relation("GameCategories")
  resources       Resource[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  itemType        ItemTypeEnum  @default(GAME)
}

model WebItem {
  id              String        @id @default(cuid())
  name            String
  slug            String        @unique
  description     String
  longDescription String?
  bannerUrl       String
  iconUrl         String
  tags            Tag[]         @relation("WebItemTags")
  technologies    Tag[]         @relation("WebItemTechnologies")
  categories      Category[]    @relation("WebItemCategories")
  resources       Resource[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  itemType        ItemTypeEnum  @default(WEB)
  projectUrl      String?
}

model AppItem {
  id              String        @id @default(cuid())
  name            String
  slug            String        @unique
  description     String
  longDescription String?
  bannerUrl       String
  iconUrl         String
  tags            Tag[]         @relation("AppItemTags")
  platforms       Tag[]         @relation("AppItemPlatforms")
  categories      Category[]    @relation("AppItemCategories")
  resources       Resource[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  itemType        ItemTypeEnum  @default(APP)
  projectUrl      String?
}

model ArtMusicItem {
  id              String        @id @default(cuid())
  name            String
  slug            String        @unique
  description     String
  longDescription String?
  bannerUrl       String
  iconUrl         String
  tags            Tag[]         @relation("ArtMusicItemTags")
  artistName      String?
  mediumId        String?       // Suponiendo que "medium" es una etiqueta Tag
  medium          Tag?          @relation("ArtMusicItemMedium", fields: [mediumId], references: [id])
  categories      Category[]    @relation("ArtMusicItemCategories")
  resources       Resource[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  itemType        ItemTypeEnum  @default(ART_MUSIC)
  projectUrl      String?
}

model Resource {
  id                  String            @id @default(cuid())
  name                String
  slug                String            @unique
  parentItemId        String            // ID del Game, WebItem, AppItem o ArtMusicItem
  parentItemType      ItemTypeEnum      // Tipo del item padre
  game                Game?             @relation(fields: [parentItemId], references: [id], onDelete: Cascade)
  webItem             WebItem?          @relation(fields: [parentItemId], references: [id], onDelete: Cascade)
  appItem             AppItem?          @relation(fields: [parentItemId], references: [id], onDelete: Cascade)
  artMusicItem        ArtMusicItem?     @relation(fields: [parentItemId], references: [id], onDelete: Cascade)
  categoryId          String
  category            Category          @relation(fields: [categoryId], references: [id])
  imageUrl            String
  imageGallery        Json?             // Storing as JSON array of strings (PostgreSQL soporta Json)
  downloads           Int               @default(0)
  version             String
  description         String
  detailedDescription String
  requirements        String?
  authorId            String
  author              Author            @relation(fields: [authorId], references: [id])
  tags                Tag[]             @relation("ResourceTags")
  files               ResourceFile[]
  changelogEntries    ChangelogEntry[]
  rating              Float?
  reviewCount         Int?              @default(0)
  followers           Int?              @default(0)
  discordLink         String?
  wikiLink            String?
  issuesLink          String?
  sourceLink          String?
  projectUrl          String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model ResourceFile {
  id                String    @id @default(cuid())
  name              String
  url               String
  size              String
  resourceId        String
  resource          Resource  @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  supportedVersions Tag[]     @relation("ResourceFileVersions")
  supportedLoaders  Tag[]     @relation("ResourceFileLoaders")
  channelId         String?
  channel           Tag?      @relation("ResourceFileChannels", fields: [channelId], references: [id])
  date              DateTime? @default(now())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model ChangelogEntry {
  id                String    @id @default(cuid())
  versionName       String
  date              DateTime
  notes             String
  resourceId        String
  resource          Resource  @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  relatedFileId     String?   // Opcional, si el changelog es para un archivo específico
  gameVersionTagId  String?
  gameVersionTag    Tag?      @relation("ChangelogVersions", fields: [gameVersionTagId], references: [id])
  channelTagId      String?
  channelTag        Tag?      @relation("ChangelogChannels", fields: [channelTagId], references: [id])
  loaderTags        Tag[]     @relation("ChangelogLoaders")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}
