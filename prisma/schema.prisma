// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS

enum ItemTypeEnum {
  GAME
  WEB
  APP
  ART_MUSIC
}

enum TagTypeEnum {
  VERSION
  LOADER
  GENRE
  PLATFORM
  MISC
  CHANNEL
  FRAMEWORK
  LANGUAGE
  TOOLING
  APP_CATEGORY
  ART_STYLE
  MUSIC_GENRE
}

// Role Enum for Users
enum Role {
  USER
  ADMIN
}

// MODELS

// Authentication models (NextAuth.js)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER) // Changed from String to Enum Role
  accounts      Account[]
  sessions      Session[]
  authorProfile Author?   @relation("UserAuthorProfile")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// PinkStar Specific Models

model Author {
  id        String     @id @default(cuid())
  name      String
  avatarUrl String?
  userId    String?    @unique // Optional: Link to a User account
  user      User?      @relation("UserAuthorProfile", fields: [userId], references: [id], onDelete: SetNull)
  resources Resource[] @relation("AuthorResources")
}

model Tag {
  id                      String           @id @default(cuid())
  name                    String
  type                    TagTypeEnum
  color                   String?
  textColor               String?
  games                   Game[]           @relation("GameTags")
  webItems                WebItem[]        @relation("WebItemTags")
  webItemTechnologies     WebItem[]        @relation("WebItemTechnologies")
  appItems                AppItem[]        @relation("AppItemTags")
  appItemPlatforms        AppItem[]        @relation("AppItemPlatforms")
  artMusicItems           ArtMusicItem[]   @relation("ArtMusicItemTags")
  artMusicItemMedium      ArtMusicItem?    @relation("ArtMusicItemMedium") // An ArtMusicItem has one medium Tag
  resources               Resource[]       @relation("ResourceTags")
  resourceFilesVersions   ResourceFile[]   @relation("ResourceFileSupportedVersions")
  resourceFilesLoaders    ResourceFile[]   @relation("ResourceFileSupportedLoaders")
  resourceFileChannels    ResourceFile[]   @relation("ResourceFileChannel")
  changelogGameVersions   ChangelogEntry[] @relation("ChangelogGameVersionRelation")
  changelogChannels       ChangelogEntry[] @relation("ChangelogChannelRelation")
  changelogLoaderTags     ChangelogEntry[] @relation("ChangelogLoaderTagsRelation")

  @@unique([name, type]) // Ensure tag names are unique within their type
}

// Base Item types (polymorphic association through optional fields in Category/Resource)
model Game {
  id              String     @id @default(cuid())
  name            String     @unique
  slug            String     @unique
  itemType        ItemTypeEnum @default(GAME) // To identify type
  description     String
  longDescription String?    @db.Text
  bannerUrl       String?
  iconUrl         String?
  tags            Tag[]      @relation("GameTags")
  categories      Category[] @relation("GameCategories")
  resources       Resource[] @relation("GameResources") // Direct relation for resources under this game if not using categories broadly
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model WebItem {
  id              String     @id @default(cuid())
  name            String     @unique
  slug            String     @unique
  itemType        ItemTypeEnum @default(WEB)
  description     String
  longDescription String?    @db.Text
  bannerUrl       String?
  iconUrl         String?
  projectUrl      String? // Direct link to the live project/demo
  tags            Tag[]      @relation("WebItemTags")
  technologies    Tag[]      @relation("WebItemTechnologies") // Specific for web: React, Vue, etc.
  categories      Category[] @relation("WebItemCategories")
  resources       Resource[] @relation("WebItemResources")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model AppItem {
  id              String     @id @default(cuid())
  name            String     @unique
  slug            String     @unique
  itemType        ItemTypeEnum @default(APP)
  description     String
  longDescription String?    @db.Text
  bannerUrl       String?
  iconUrl         String?
  projectUrl      String? // Direct link to app store page or website
  tags            Tag[]      @relation("AppItemTags")
  platforms       Tag[]      @relation("AppItemPlatforms") // Specific for apps: iOS, Android, Web App
  categories      Category[] @relation("AppItemCategories")
  resources       Resource[] @relation("AppItemResources")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model ArtMusicItem {
  id              String     @id @default(cuid())
  name            String     @unique
  slug            String     @unique
  itemType        ItemTypeEnum @default(ART_MUSIC)
  artistName      String?
  description     String
  longDescription String?    @db.Text
  bannerUrl       String?
  iconUrl         String?
  projectUrl      String? // Direct link to gallery, portfolio, streaming page
  tags            Tag[]      @relation("ArtMusicItemTags")
  medium          Tag?       @relation("ArtMusicItemMedium", fields: [mediumId], references: [id]) // Specific for art/music: Digital Painting, Sculpture
  mediumId        String?
  categories      Category[] @relation("ArtMusicItemCategories")
  resources       Resource[] @relation("ArtMusicItemResources")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Category {
  id             String        @id @default(cuid())
  name           String
  slug           String
  description    String?
  parentItemId   String?       // ID of the Game, WebItem, AppItem, or ArtMusicItem
  parentItemType ItemTypeEnum  // Type of the parent item
  game           Game?         @relation("GameCategories", fields: [parentItemId], references: [id], onDelete: Cascade, map: "fk_category_game")
  webItem        WebItem?      @relation("WebItemCategories", fields: [parentItemId], references: [id], onDelete: Cascade, map: "fk_category_webitem")
  appItem        AppItem?      @relation("AppItemCategories", fields: [parentItemId], references: [id], onDelete: Cascade, map: "fk_category_appitem")
  artMusicItem   ArtMusicItem? @relation("ArtMusicItemCategories", fields: [parentItemId], references: [id], onDelete: Cascade, map: "fk_category_artmusicitem")
  resources      Resource[]    @relation("CategoryResources") // Resources within this category

  @@unique([parentItemId, slug, parentItemType]) // Slug must be unique within a parent item
  @@index([parentItemId])
}

model Resource {
  id                  String           @id @default(cuid())
  name                String
  slug                String           @unique // Slug should be globally unique for resources
  parentItemId        String           // ID of the Game, WebItem, etc.
  parentItemType      ItemTypeEnum     // Type of the parent item
  game                Game?            @relation("GameResources", fields: [parentItemId], references: [id], onDelete: Cascade, map: "fk_resource_game")
  webItem             WebItem?         @relation("WebItemResources", fields: [parentItemId], references: [id], onDelete: Cascade, map: "fk_resource_webitem")
  appItem             AppItem?         @relation("AppItemResources", fields: [parentItemId], references: [id], onDelete: Cascade, map: "fk_resource_appitem")
  artMusicItem        ArtMusicItem?    @relation("ArtMusicItemResources", fields: [parentItemId], references: [id], onDelete: Cascade, map: "fk_resource_artmusicitem")
  categoryId          String
  category            Category         @relation("CategoryResources", fields: [categoryId], references: [id], onDelete: Cascade)
  authorId            String
  author              Author           @relation("AuthorResources", fields: [authorId], references: [id], onDelete: Cascade)
  version             String
  description         String
  detailedDescription String           @db.Text
  imageUrl            String
  imageGallery        Json? // Stored as JSON array of URLs
  requirements        String?          @db.Text
  downloads           Int              @default(0)
  followers           Int              @default(0)
  rating              Float? // Optional rating
  reviewCount         Int?             @default(0)
  linksJson           Json? // Stored as JSON object for various links (Discord, Wiki, etc.)
  tags                Tag[]            @relation("ResourceTags")
  files               ResourceFile[]   @relation("ResourceFiles")
  changelogEntries    ChangelogEntry[] @relation("ResourceChangelogEntries")
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  @@index([parentItemId])
  @@index([categoryId])
  @@index([authorId])
}

model ResourceFile {
  id                  String   @id @default(cuid())
  name                String
  url                 String // Download URL or path
  size                String // e.g., "5.5 MB"
  resourceId          String
  resource            Resource @relation("ResourceFiles", fields: [resourceId], references: [id], onDelete: Cascade)
  supportedVersions   Tag[]    @relation("ResourceFileSupportedVersions") // Links to Tags of type VERSION
  supportedLoaders    Tag[]    @relation("ResourceFileSupportedLoaders") // Links to Tags of type LOADER
  channelId           String?  // Release, Beta, Alpha (links to a Tag of type CHANNEL)
  channel             Tag?     @relation("ResourceFileChannel", fields: [channelId], references: [id])
  date                DateTime @default(now()) // Upload/Release date of this specific file

  @@index([resourceId])
  @@index([channelId])
}

model ChangelogEntry {
  id                String   @id @default(cuid())
  resourceId        String
  resource          Resource @relation("ResourceChangelogEntries", fields: [resourceId], references: [id], onDelete: Cascade)
  versionName       String // e.g., "v1.2.0"
  date              DateTime @default(now())
  notes             String   @db.Text
  relatedFileId     String?  @unique // Optional: if this changelog entry is tied to a specific file release
  gameVersionTagId  String?
  gameVersionTag    Tag?     @relation("ChangelogGameVersionRelation", fields: [gameVersionTagId], references: [id])
  channelTagId      String?
  channelTag        Tag?     @relation("ChangelogChannelRelation", fields: [channelTagId], references: [id])
  loaderTags        Tag[]    @relation("ChangelogLoaderTagsRelation") // Can support multiple loaders

  @@index([resourceId])
  @@index([gameVersionTagId])
  @@index([channelTagId])
}

    