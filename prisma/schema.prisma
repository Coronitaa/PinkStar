// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Cambiado de sqlite a postgresql
  url      = env("DATABASE_URL")
}

enum ItemTypeEnum {
  GAME
  WEB
  APP
  ART_MUSIC
}

enum TagTypeEnum {
  VERSION
  LOADER
  GENRE // For game genres
  PLATFORM // For game platforms & app platforms
  MISC // For game misc tags, web project types, app features, art/music mediums
  CHANNEL // For resource file release channels (Release, Beta, Alpha)
  FRAMEWORK // For web frameworks (React, Vue, Next.js)
  LANGUAGE // For programming languages (JS, TS, Python)
  TOOLING // For development tools (Webpack, Docker, Figma)
  APP_CATEGORY // For app-specific categories (Productivity, Social)
  ART_STYLE // For art styles (Digital, Pixel Art)
  MUSIC_GENRE // For music genres (Electronic, Ambient)
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatarUrl String?
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authoredResources Resource[] @relation("AuthoredBy")
  // Add other OAuth provider fields if needed
}

model Author {
  id        String   @id @default(cuid())
  name      String
  avatarUrl String?
  userId    String?  @unique // Optional: link to a User account
  user      User?    @relation(fields: [userId], references: [id])
  resources Resource[]
}

model Tag {
  id        String      @id @default(cuid())
  name      String
  type      TagTypeEnum
  color     String?
  textColor String?

  games           Game[]           @relation("GameTags")
  webItems        WebItem[]        @relation("WebItemTags")
  appItems        AppItem[]        @relation("AppItemTags")
  artMusicItems   ArtMusicItem[]   @relation("ArtMusicItemTags")
  resources       Resource[]       @relation("ResourceTags")
  resourceFiles   ResourceFile[]   @relation("ResourceFileTags") // For file-specific tags like version/loader if stored denormalized, or use specific relation tables

  @@unique([name, type])
}

model Category {
  id              String       @id @default(cuid())
  name            String
  slug            String       @unique
  description     String?
  parentItemType  ItemTypeEnum // To know if it's a game category, web category etc.
  
  games           Game[]           @relation("GameCategories")
  webItems        WebItem[]        @relation("WebItemCategories")
  appItems        AppItem[]        @relation("AppItemCategories")
  artMusicItems   ArtMusicItem[]   @relation("ArtMusicItemCategories")
  resources       Resource[]

  @@index([parentItemType])
}

model Game {
  id              String    @id @default(cuid())
  name            String
  slug            String    @unique
  description     String
  longDescription String?   @db.Text
  bannerUrl       String
  iconUrl         String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  itemType        ItemTypeEnum @default(GAME)

  tags            Tag[]     @relation("GameTags")
  categories      Category[] @relation("GameCategories")
  resources       Resource[] @relation("GameResources")
}

model WebItem {
  id              String    @id @default(cuid())
  name            String
  slug            String    @unique
  description     String
  longDescription String?   @db.Text
  bannerUrl       String
  iconUrl         String
  projectUrl      String?   // External URL for the web project
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  itemType        ItemTypeEnum @default(WEB)

  tags            Tag[]     @relation("WebItemTags")
  categories      Category[] @relation("WebItemCategories")
  resources       Resource[] @relation("WebItemResources")
  // technologies    Tag[]     @relation("WebItemTechnologies") // Could be a subset of Tags or a separate relation
}

model AppItem {
  id              String    @id @default(cuid())
  name            String
  slug            String    @unique
  description     String
  longDescription String?   @db.Text
  bannerUrl       String
  iconUrl         String
  projectUrl      String?   // External URL (e.g., app store)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  itemType        ItemTypeEnum @default(APP)

  tags            Tag[]     @relation("AppItemTags")
  categories      Category[] @relation("AppItemCategories")
  resources       Resource[] @relation("AppItemResources")
  // platforms       Tag[]     @relation("AppItemPlatforms")
}

model ArtMusicItem {
  id              String    @id @default(cuid())
  name            String
  slug            String    @unique
  description     String
  longDescription String?   @db.Text
  bannerUrl       String
  iconUrl         String
  artistName      String?
  projectUrl      String?   // External URL (e.g., gallery, streaming)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  itemType        ItemTypeEnum @default(ART_MUSIC)

  tags            Tag[]     @relation("ArtMusicItemTags")
  categories      Category[] @relation("ArtMusicItemCategories")
  resources       Resource[] @relation("ArtMusicItemResources")
  // medium          Tag?      @relation("ArtMusicMedium") // Could be a specific Tag type
}

model Resource {
  id                  String    @id @default(cuid())
  name                String
  slug                String    @unique
  version             String
  description         String    @db.Text
  detailedDescription String?   @db.Text
  imageUrl            String
  
  downloads           Int       @default(0)
  rating              Float?
  reviewCount         Int?      @default(0)
  followers           Int?      @default(0)
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  requirements        String?   @db.Text
  
  authorId            String
  author              Author    @relation(fields: [authorId], references: [id])
  
  tags                Tag[]     @relation("ResourceTags")
  
  parentItemType      ItemTypeEnum
  gameId              String?   // Foreign key for Game
  webItemId           String?   // Foreign key for WebItem
  appItemId           String?   // Foreign key for AppItem
  artMusicItemId      String?   // Foreign key for ArtMusicItem
  
  game                Game?     @relation("GameResources", fields: [gameId], references: [id])
  webItem             WebItem?  @relation("WebItemResources", fields: [webItemId], references: [id])
  appItem             AppItem?  @relation("AppItemResources", fields: [appItemId], references: [id])
  artMusicItem        ArtMusicItem? @relation("ArtMusicItemResources", fields: [artMusicItemId], references: [id])

  categoryId          String
  category            Category  @relation(fields: [categoryId], references: [id])

  files               ResourceFile[]
  changelogEntries    ChangelogEntry[]

  creatorId           String?   // If linking to a User directly
  creator             User?     @relation("AuthoredBy", fields: [creatorId], references: [id])

  // ResourceLinks (Consider embedding or a separate model if complex)
  linkDiscord         String?
  linkWiki            String?
  linkIssues          String?
  linkSource          String?
  linkProjectUrl      String?

  @@index([parentItemType])
  @@index([authorId])
  @@index([categoryId])
  @@index([gameId])
  @@index([webItemId])
  @@index([appItemId])
  @@index([artMusicItemId])
}

model ResourceFile {
  id        String   @id @default(cuid())
  name      String
  url       String   // URL to the file (e.g., CDN, S3)
  size      String   // e.g., "5.5 MB"
  channel   String?  // e.g., Release, Beta, Alpha (could link to a Tag of type CHANNEL)
  date      DateTime @default(now())

  resourceId String
  resource  Resource @relation(fields: [resourceId], references: [id])

  tags      Tag[]    @relation("ResourceFileTags") // For specific versions, loaders linked to this file

  @@index([resourceId])
}

model ChangelogEntry {
  id            String   @id @default(cuid())
  versionName   String
  date          DateTime
  notes         String   @db.Text
  relatedFileId String?  // Optionally link to a specific ResourceFile

  resourceId    String
  resource      Resource @relation(fields: [resourceId], references: [id])

  @@index([resourceId])
}
