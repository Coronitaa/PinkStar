// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enum for User Roles
enum Role {
  USER
  ADMIN
  MODERATOR // Example of another role
}

// User model for NextAuth.js
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER) // Role field
  accounts      Account[]
  sessions      Session[]
  // Optional: Link to Author profile if a user can be an author
  authorProfile Author?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Enum for Item types
enum ItemTypeEnum {
  GAME
  WEB
  APP
  ART_MUSIC
}

// Enum for Tag types
enum TagTypeEnum {
  VERSION
  LOADER
  GENRE      // For Game items (e.g., Utility, Map, Texture Pack)
  PLATFORM   // For Game and App items (e.g., PC, iOS, Android)
  MISC       // For any item type (e.g., Library, Template Type, Brush Pack)
  CHANNEL    // For ResourceFiles (e.g., Release, Beta, Alpha)

  // Web specific
  FRAMEWORK
  LANGUAGE
  TOOLING

  // App specific
  APP_CATEGORY // For App items (e.g., Productivity, Social)

  // Art/Music specific
  ART_STYLE
  MUSIC_GENRE
}


// Model for Authors/Creators
model Author {
  id        String     @id @default(cuid())
  name      String
  avatarUrl String?
  userId    String?    @unique // Optional link to a User account
  user      User?      @relation(fields: [userId], references: [id])
  resources Resource[] @relation("AuthorResources")
}

// Model for Tags (versions, loaders, genres, etc.)
model Tag {
  id                      String           @id @default(cuid())
  name                    String
  type                    TagTypeEnum
  color                   String?
  // Game Item specific relations
  games                   Game[]           @relation("GameTags")
  // Web Item specific relations
  webItemsAsTag           WebItem[]        @relation("WebItemTags")
  webItemsAsTechnology    WebItem[]        @relation("WebItemTechnologies")
  // App Item specific relations
  appItemsAsTag           AppItem[]        @relation("AppItemTags")
  appItemsAsPlatform      AppItem[]        @relation("AppItemPlatforms")
  // Art/Music Item specific relations
  artMusicItemsAsTag      ArtMusicItem[]   @relation("ArtMusicItemTags")
  artMusicItemsAsMedium   ArtMusicItem[]   @relation("ArtMusicMedium")
  // Resource specific relations
  resources               Resource[]       @relation("ResourceTags")
  // ResourceFile specific relations
  resourceFilesAsVersion  ResourceFile[]   @relation("ResourceFileSupportedVersions")
  resourceFilesAsLoader   ResourceFile[]   @relation("ResourceFileSupportedLoaders")
  resourceFilesAsChannel  ResourceFile[]   @relation("ResourceFileChannel")
  // ChangelogEntry specific relations
  changelogGameVersions   ChangelogEntry[] @relation("ChangelogGameVersionRelation")
  changelogChannels       ChangelogEntry[] @relation("ChangelogChannelRelation")
  changelogLoaders        ChangelogEntry[] @relation("ChangelogLoaderTagsRelation") // Corrected to a list for many-to-many potential
}


// Base Item Models (using mapped inheritance or shared fields)
// For simplicity, we'll use distinct models that share some conceptual fields

model Game {
  id              String       @id @default(cuid())
  name            String
  slug            String       @unique
  itemType        ItemTypeEnum @default(GAME)
  description     String
  longDescription String?      @db.Text
  bannerUrl       String
  iconUrl         String
  tags            Tag[]        @relation("GameTags")
  categories      Category[]   @relation("GameCategories")
  resources       Resource[]   @relation("GameResources")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model WebItem {
  id              String       @id @default(cuid())
  name            String
  slug            String       @unique
  itemType        ItemTypeEnum @default(WEB)
  description     String
  longDescription String?      @db.Text
  bannerUrl       String
  iconUrl         String
  projectUrl      String? // Link to live project/demo
  tags            Tag[]        @relation("WebItemTags")
  technologies    Tag[]        @relation("WebItemTechnologies") // Could reuse Tag with specific types
  categories      Category[]   @relation("WebItemCategories")
  resources       Resource[]   @relation("WebItemResources")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model AppItem {
  id              String       @id @default(cuid())
  name            String
  slug            String       @unique
  itemType        ItemTypeEnum @default(APP)
  description     String
  longDescription String?      @db.Text
  bannerUrl       String
  iconUrl         String
  projectUrl      String? // Link to app store, etc.
  tags            Tag[]        @relation("AppItemTags")
  platforms       Tag[]        @relation("AppItemPlatforms") // Could reuse Tag with specific types
  categories      Category[]   @relation("AppItemCategories")
  resources       Resource[]   @relation("AppItemResources")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model ArtMusicItem {
  id              String       @id @default(cuid())
  name            String
  slug            String       @unique
  itemType        ItemTypeEnum @default(ART_MUSIC)
  artistName      String?
  description     String
  longDescription String?      @db.Text
  bannerUrl       String
  iconUrl         String
  projectUrl      String? // Link to portfolio, streaming, etc.
  tags            Tag[]        @relation("ArtMusicItemTags")
  mediumId        String?      // Assuming medium is a Tag
  medium          Tag?         @relation("ArtMusicMedium", fields: [mediumId], references: [id])
  categories      Category[]   @relation("ArtMusicItemCategories")
  resources       Resource[]   @relation("ArtMusicItemResources")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

// Model for Categories (Mods, Plugins, Themes, etc.)
model Category {
  id              String        @id @default(cuid())
  name            String
  slug            String // Auto-generated from name, unique per parent item type
  description     String?
  parentItemId    String        // ID of the Game, WebItem, AppItem, or ArtMusicItem this category belongs to
  parentItemType  ItemTypeEnum  // Type of the parent item
  // Relations to specific parent item types (optional, one of these will be set)
  game            Game?         @relation("GameCategories", fields: [parentItemId], references: [id], onDelete: Cascade, map: "fk_category_game")
  webItem         WebItem?      @relation("WebItemCategories", fields: [parentItemId], references: [id], onDelete: Cascade, map: "fk_category_webitem")
  appItem         AppItem?      @relation("AppItemCategories", fields: [parentItemId], references: [id], onDelete: Cascade, map: "fk_category_appitem")
  artMusicItem    ArtMusicItem? @relation("ArtMusicItemCategories", fields: [parentItemId], references: [id], onDelete: Cascade, map: "fk_category_artmusicitem")
  resources       Resource[]    @relation("CategoryResources") // Resources within this category

  @@unique([parentItemId, slug])
  @@index([parentItemId])
}

// Model for individual Resources (specific mods, assets, articles, etc.)
model Resource {
  id                  String           @id @default(cuid())
  name                String
  slug                String           @unique
  parentItemId        String           // ID of the Game, WebItem, AppItem, or ArtMusicItem this resource belongs to
  parentItemType      ItemTypeEnum     // Tipo del item padre
  // Relations to specific parent item types (optional, one of these will be set)
  game                Game?            @relation("GameResources", fields: [parentItemId], references: [id], onDelete: Cascade, map: "fk_resource_game")
  webItem             WebItem?         @relation("WebItemResources", fields: [parentItemId], references: [id], onDelete: Cascade, map: "fk_resource_webitem")
  appItem             AppItem?         @relation("AppItemResources", fields: [parentItemId], references: [id], onDelete: Cascade, map: "fk_resource_appitem")
  artMusicItem        ArtMusicItem?    @relation("ArtMusicItemResources", fields: [parentItemId], references: [id], onDelete: Cascade, map: "fk_resource_artmusicitem")
  categoryId          String
  category            Category         @relation("CategoryResources", fields: [categoryId], references: [id], onDelete: Cascade)
  authorId            String
  author              Author           @relation("AuthorResources", fields: [authorId], references: [id])
  version             String           // e.g., "1.2.3", "Beta 2"
  description         String           @db.Text // Short description for cards
  detailedDescription String           @db.Text // Full description, supports markdown
  imageUrl            String           // Main image for the resource
  imageGallery        Json?            // Storing as JSON array of strings
  downloads           Int              @default(0)
  followers           Int              @default(0)
  rating              Float?           // Average rating, e.g., 4.5
  reviewCount         Int?             @default(0)
  requirements        String?          @db.Text // Markdown supported
  linksJson           Json?            // For storing arbitrary links like Discord, Wiki, Source, etc. as { "discord": "url", "wiki": "url" }
  tags                Tag[]            @relation("ResourceTags")
  files               ResourceFile[]   @relation("ResourceFiles")
  changelogEntries    ChangelogEntry[] @relation("ResourceChangelogEntries")
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  @@index([parentItemId])
  @@index([categoryId])
  @@index([authorId])
}

// Model for Resource Files
model ResourceFile {
  id                  String   @id @default(cuid())
  resourceId          String
  resource            Resource @relation("ResourceFiles", fields: [resourceId], references: [id], onDelete: Cascade)
  name                String   // e.g., "ultragfx-v1.2.0-fabric.jar"
  url                 String   // Download URL
  size                String   // e.g., "5.2 MB"
  supportedVersions   Tag[]    @relation("ResourceFileSupportedVersions") // Links to Tags of type VERSION
  supportedLoaders    Tag[]    @relation("ResourceFileSupportedLoaders")  // Links to Tags of type LOADER
  channelId           String?  // Release, Beta, Alpha (links to a Tag of type CHANNEL)
  channel             Tag?     @relation("ResourceFileChannel", fields: [channelId], references: [id])
  date                DateTime @default(now()) // Upload/Release date of this specific file
  changelogEntry      ChangelogEntry? // A file can have one associated changelog entry

  @@index([resourceId])
  @@index([channelId])
}

// Model for Changelog Entries
model ChangelogEntry {
  id                String   @id @default(cuid())
  resourceId        String
  resource          Resource @relation("ResourceChangelogEntries", fields: [resourceId], references: [id], onDelete: Cascade)
  versionName       String   // e.g., "v1.2.0", "Update 5"
  notes             String   @db.Text // Markdown supported
  date              DateTime @default(now())
  // Optional: Link to a specific ResourceFile if this changelog entry is tied to one file release
  relatedFileId     String?  @unique
  relatedFile       ResourceFile? @relation(fields: [relatedFileId], references: [id])
  // Tags for filtering changelog (denormalized for easier querying if needed, or linked)
  gameVersionTagId  String?
  gameVersionTag    Tag?     @relation("ChangelogGameVersionRelation", fields: [gameVersionTagId], references: [id])
  channelTagId      String?
  channelTag        Tag?     @relation("ChangelogChannelRelation", fields: [channelTagId], references: [id])
  loaderTags        Tag[]    @relation("ChangelogLoaderTagsRelation") // For multiple loader compatibilities

  @@index([resourceId])
  @@index([relatedFileId])
  @@index([gameVersionTagId])
  @@index([channelTagId])
}
